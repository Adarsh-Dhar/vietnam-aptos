generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProjectStatus {
  ACTIVE
  SUCCESS
  FAILURE
  TIE
  CANCELLED
  PENDING_VALIDATION
}

enum BetType {
  SUPPORT
  DOUBT
}

enum UserRole {
  FOUNDER
  INVESTOR
  ADMIN
}

model User {
  id            String    @id @default(uuid())
  aptosAddress  String    @unique
  username      String?
  bio           String?
  roles         UserRole[]
  reputation    Float     @default(0.0)
  createdProjects Project[]
  bets          Bet[]
  payouts       Payout[]
  nfts          NFT[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Project {
  id              String     @id @default(uuid())
  creator         User       @relation(fields: [creatorId], references: [id])
  creatorId       String
  aptosContract   String     // Removed @unique constraint
  name            String
  description     String
  coverImage      String?
  listingFee      Float
  targetHolders   Int
  currentHolders  Int        @default(0)
  deadline        DateTime
  status          ProjectStatus @default(ACTIVE)
  supportPool     Float      @default(0)
  doubtPool       Float      @default(0)
  totalPool       Float      @default(0)
  platformFee     Float      @default(0.01)
  selectedNFTId   String?    // ID of the selected NFT for this project
  selectedNFT     NFT?       @relation(fields: [selectedNFTId], references: [id])
  bets            Bet[]
  validation      Validation?
  metrics         Metric[]
  categories      Category[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  Payout Payout[]
}

model Metric {
  id          String   @id @default(uuid())
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   String
  holderCount Int
  volume      Float
  avgPrice    Float
  timestamp   DateTime @default(now())
}

model Bet {
  id        String   @id @default(uuid())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  amount    Float
  type      BetType
  odds      Float
  claimed   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([projectId, userId])
}

model Validation {
  id             String   @id @default(uuid())
  project        Project  @relation(fields: [projectId], references: [id])
  projectId      String   @unique
  finalHolders   Int
  supportPool    Float
  doubtPool      Float
  totalPool      Float
  platformFee    Float
  oracleTxHash   String?
  processedAt    DateTime?
  createdAt      DateTime @default(now())
}

model Payout {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   String
  amount      Float
  txHash      String?
  type        BetType
  createdAt   DateTime @default(now())
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  projects Project[]
}

model PlatformStats {
  id               String  @id @default("1" )
  totalProjects    Int     @default(0)
  activeProjects   Int     @default(0)
  totalVolume      Float   @default(0)
  avgSuccessRate   Float   @default(0)
  totalPayouts     Float   @default(0)
  platformEarnings Float   @default(0)
}

model NFT {
  id                    String   @id @default(uuid())
  creator               User     @relation(fields: [creatorId], references: [id])
  creatorId             String
  collectionName        String
  collectionDescription String
  collectionUri         String
  tokenName             String
  tokenDescription      String?
  tokenUri              String
  imageUrl              String?
  collectionTxHash      String?
  mintTxHash            String?
  aptosTokenId          String?  // Aptos token identifier
  aptosCollectionId     String?  // Aptos collection identifier
  status                NFTStatus @default(MINTING)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  projects Project[]     // Projects that use this NFT

  @@unique([collectionName, tokenName])
}

enum NFTStatus {
  MINTING
  MINTED
  FAILED
  TRANSFERRED
}